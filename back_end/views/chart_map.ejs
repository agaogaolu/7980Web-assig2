<!-- Styles -->
<style>
    #chartdiv {
        width: 100%;
        height: 600px
    }
</style>

<!-- Resources -->
<script src="https://cdn.amcharts.com/lib/5/index.js"></script>
<script src="https://cdn.amcharts.com/lib/5/map.js"></script>
<script src="https://cdn.amcharts.com/lib/5/geodata/worldLow.js"></script>
<script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>
<script src="/javascripts/country.js"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

<link href="./assets/dist/css/bootstrap.min.css" rel="stylesheet">
<!-- HTML -->
<a class="btn btn-primary me-2" href="javascript:history.back()" role="button">back</a>
<h1>Customer Distribution Map</h1>
<div id="chartdiv"></div>


<!-- Chart code -->
<script>


    am5.ready(function () {

        // Create root element
        // https://www.amcharts.com/docs/v5/getting-started/#Root_element
        var root = am5.Root.new("chartdiv");

        // Set themes
        // https://www.amcharts.com/docs/v5/concepts/themes/
        root.setThemes([
            am5themes_Animated.new(root)
        ]);

        // Create the map chart
        // https://www.amcharts.com/docs/v5/charts/map-chart/
        var chart = root.container.children.push(
            am5map.MapChart.new(root, {
                panX: "rotateX",
                panY: "rotateY",
                projection: am5map.geoMercator()
            })
        );

        // Create series for background fill
        // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/#Background_polygon
        var backgroundSeries = chart.series.push(am5map.MapPolygonSeries.new(root, {}));
        backgroundSeries.mapPolygons.template.setAll({
            fill: root.interfaceColors.get("alternativeBackground"),
            fillOpacity: 0,
            strokeOpacity: 0
        });
        // Add background polygo
        // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/#Background_polygon
        backgroundSeries.data.push({
            geometry: am5map.getGeoRectangle(90, 180, -90, -180)
        });

        // Create main polygon series for countries
        // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/
        var polygonSeries = chart.series.push(
            am5map.MapPolygonSeries.new(root, {
                geoJSON: am5geodata_worldLow
            })
        );

        polygonSeries.mapPolygons.template.setAll({
            fill: root.interfaceColors.get("alternativeBackground"),
            fillOpacity: 0.15,
            strokeWidth: 0.5,
            stroke: root.interfaceColors.get("background")
        });

        // Create polygon series for circles
        // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/
        var circleTemplate = am5.Template.new({
            tooltipText: "{name}: {value}"
        });

        var bubbleSeries = chart.series.push(
            am5map.MapPointSeries.new(root, {
                calculateAggregates: true,
                valueField: "value",
                polygonIdField: "id"
            })
        );

        bubbleSeries.bullets.push(function () {
            return am5.Bullet.new(root, {
                sprite: am5.Circle.new(root, {
                    radius: 10,
                    templateField: "circleTemplate"
                }, circleTemplate)
            });
        });

        bubbleSeries.set("heatRules", [{
            target: circleTemplate,
            min: 3,
            max: 30,
            key: "radius",
            dataField: "value"
        }]);

        var colors = am5.ColorSet.new(root, {});

        var data = <%-  data %>;
        const colorLookup = cty_color.reduce((acc, item) => {
            acc[item.id] = item.colorIndex;
            return acc;
        }, {});

        const coloredData = data.map(item => {
            const colorIndex = colorLookup[item.id] !== undefined ? colorLookup[item.id] : 0; 

            return {
                id: item.id,
                name: item.name || 'Unknown Country',
                value: item.value,
                circleTemplate: { fill: colors.getIndex(colorIndex) }
            };
        });
        console.log(coloredData)
        bubbleSeries.data.setAll(coloredData);
        
        var cont = chart.children.push(am5.Container.new(root, {
            layout: root.horizontalLayout,
            x: 20,
            y: 40
        }));

        cont.children.push(am5.Label.new(root, {
            centerY: am5.p50,
            text: "Map"
        }));

        var switchButton = cont.children.push(
            am5.Button.new(root, {
                themeTags: ["switch"],
                centerY: am5.p50,
                icon: am5.Circle.new(root, {
                    themeTags: ["icon"]
                })
            })
        );

        switchButton.on("active", function () {
            if (!switchButton.get("active")) {
                chart.set("projection", am5map.geoMercator());
                backgroundSeries.mapPolygons.template.set("fillOpacity", 0);
            } else {
                chart.set("projection", am5map.geoOrthographic());
                backgroundSeries.mapPolygons.template.set("fillOpacity", 0.1);
            }
        });

        cont.children.push(
            am5.Label.new(root, {
                centerY: am5.p50,
                text: "Globe"
            })
        );

        // Make stuff animate on load
        chart.appear(1000, 100);

    }); // end am5.ready()

</script>

